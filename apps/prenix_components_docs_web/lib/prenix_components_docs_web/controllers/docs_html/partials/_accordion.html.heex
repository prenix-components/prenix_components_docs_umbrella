<h2>Usage</h2>
<div class="preview">
  <.accordion>
    <.accordion_item>
      <:toggle>
        Accordion Item #1 Accordion Item #1 Accordion Item #1Accordion Item #1Accordion Item #1Accordion Item #1 Accordion Item #1 Accordion Item #1
      </:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h2>Custom Header</h2>
<div class="preview">
  <.accordion>
    <.accordion_item>
      <:toggle>
        Accordion Item #1
        <span class="text-sm block text-neutral2-foreground font-normal">
          Press to expand
        </span>
      </:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>
        Accordion Item #2
        <span class="text-sm block text-neutral2-foreground font-normal">
          Press to expand
        </span>
      </:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>
        Accordion Item #3
        <span class="text-sm block text-neutral2-foreground font-normal">
          Press to expand
        </span>
      </:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h2>Variants</h2>
<h4>Light</h4>
<div class="preview flex-col">
  <.accordion>
    <.accordion_item>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h4>Shadow</h4>
<div class="preview flex-col">
  <.accordion variant="shadow">
    <.accordion_item>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h4>Bordered</h4>
<div class="preview flex-col">
  <.accordion variant="bordered">
    <.accordion_item>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h4>Splitted</h4>
<div class="preview flex-col">
  <.accordion variant="splitted">
    <.accordion_item>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h2>Default expanded</h2>
<div class="preview">
  <.accordion>
    <.accordion_item show={true}>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h2>Expand Multiple</h2>
<div class="preview">
  <.accordion expand_multiple>
    <.accordion_item>
      <:toggle>Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item>
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>

<h2>Customising</h2>
<div class="preview">
  <.accordion class="bg-gray-200 text-purple-600 my-10">
    <.accordion_item>
      <:toggle icon_class="text-red-500" icon_wrapper_class="px-2">Accordion Item #1</:toggle>

      <strong>This is the first item's accordion body.</strong>
      It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item body_class="text-2xl text-green-800" divider_class="my-4 bg-red-900">
      <:toggle>Accordion Item #2</:toggle>

      <strong>This is the second item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>

    <.accordion_item class="text-red-500">
      <:toggle>Accordion Item #3</:toggle>

      <strong>This is the third item's accordion body.</strong>
      It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
    </.accordion_item>
  </.accordion>
</div>
